trigger:
- master

pool: Default


#Global Variables
variables:
 myResourceGroupName: ShiraStorageAccount-rg
 subscriptionName: "MSEC_Candidates_Homeworks"
 subscriptionID: "a8108c2b-496c-424d-8347-ecc8afb6384c"
 location: "eastus"

#Connect to the self-hosted agents
steps:
- script: hostname

#Use the service connection - Github
#- task: GitHubComment@0
#  inputs:
#    gitHubConnection: 'github.com_shiraZadok'
#    repositoryName: 'shiraZadok/AzureRmPipeline_MTC'


#Task 2
#Create an ARM template for storage account
#And create 2 storage accounts
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_A `
#      -ResourceGroupName $(myResourceGroupName) `
#      -TemplateFile 'ARM_Templete_StorageAccount.json' `
#      -TemplateParameterFile 'parameters_sa1.json'
#
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_B `
#      -ResourceGroupName $(myResourceGroupName) `
#      -TemplateFile 'ARM_Templete_StorageAccount.json' `
#      -TemplateParameterFile 'parameters_sa2.json'

#Task 3
#Create an ARM template for a Windows server
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      New-AzResourceGroupDeployment `
#      -Name Deployment_create_VM_2 `
#      -ResourceGroupName '$(myResourceGroupName)' `
#      -TemplateFile 'WindowsServerTemplate2.json' `
#      -TemplateParameterFile 'WindowsServerParameters2.json'


#Task 5
#Create, Upload and Copy 100 blobs from Storage account A to B
#Execute it on the windows server
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      Set-AzContext -Subscription $(subscriptionID)   
#      $result = Invoke-AzVMRunCommand `
#       -ResourceGroupName $(myResourceGroupName) `
#       -VMName shiraWindowsServer2 `
#       -CommandId RunPowerShellScript `
#       -ScriptPath .\Create_Uplad_CopyBlobs.ps1
      

#Task 6
#Create the alert rule on the CPU% metric on a classic VM
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      
      #Create a dashboard for the Vm-shiraWindowsServer2
      #New-AzResourceGroupDeployment -Name Deployment_Create_Dashboard `
      #-ResourceGroupName $(myResourceGroupName) `
      #-TemplateFile 'DashboardTemplate.json' `
      #-TemplateParameterFile 'DashboardParametersFile.json'

      ###list the metric definition of the storage accounts
      #Storage Account A
      $resourceId_SA_A = "a8108c2b-496c-424d-8347-ecc8afb6384c"
      Get-AzMetricDefinition -ResourceId $resourceId_SA_A
      Get-AzMetric -ResourceId $resourceId_SA_A -MetricNames "UsedCapacity" -TimeGrain 01:00:00
      #Storage Account B
      #$resourceId_SA_B = ""
      #Get-AzMetricDefinition -ResourceId $resourceId
      # $resourceId = "<resource-ID>"
      #Get-AzMetric -ResourceId $resourceId -MetricNames "UsedCapacity" -TimeGrain 01:00:00
      
     



    #  $vm = Get-AzVM -ResourceGroupName $(myResourceGroupName) -Name shiraWindowsServer2
    #  $actionEmail = New-AzAlertRuleEmail -CustomEmail shira.zadok@msmail.ariel.ac.il
    #  $actionWebhook = New-AzAlertRuleWebhook -ServiceUri "https://ms.portal.azure.com"
    #  Add-AzMetricAlertRule `
    #  -Name shiraWindowsServer2 `
    #  -Location "East US" `
    #  -ResourceGroup $(myResourceGroupName) `
    #  -TargetResourceId $vm.Id `
    #  -MetricName "Percentage CPU" `
    #  -Operator GreaterThan `
    #  -Threshold 1 `
    #  -WindowSize 00:05:00 `
    #  -TimeAggregationOperator Average `
    #  -Action $actionEmail, $actionWebhook `
    #  -Description "alert on CPU > 1%"

