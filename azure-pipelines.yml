trigger:
- master

pool: Default


#Global Variables
variables:
 myResourceGroupName: ShiraStorageAccount-rg
 subscriptionID: "a8108c2b-496c-424d-8347-ecc8afb6384c"

#Connect to the self-hosted agents
steps:
- script: hostname

#- task: GitHubComment@0
#  inputs:
#    gitHubConnection: 'github.com_shiraZadok'
#    repositoryName: 'shiraZadok/AzureRmPipeline_MTC'


#Task 2
#Create an ARM template for storage account
#And create 2 storage accounts
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_A `
#      -ResourceGroupName $(myResourceGroupName) `
#      -TemplateFile 'ARM_Templete_StorageAccount.json' `
#      -TemplateParameterFile 'parameters_sa1.json'
#
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_B `
#      -ResourceGroupName $(myResourceGroupName) `
#     -TemplateFile 'ARM_Templete_StorageAccount.json' `
#     -TemplateParameterFile 'parameters_sa2.json'


#Task 3
#Create an ARM template for a Windows server
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
      
      #New-AzResourceGroupDeployment `
      #-Name Deployment_create_VM `
      #-ResourceGroupName $(myResourceGroupName) `
      #-TemplateFile 'WindowsServerTemplate.json' `
      #-TemplateParameterFile 'WindowsServerParameters.json'

#Task 5
#Create, Upload and Copy 100 blobs from Storage account A to B
#Execute it on the windows server
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Set-AzContext -Subscription $(subscriptionID)
      $connectionName = "AzureRunAsConnection"
      try
      {
          # Get the connection "AzureRunAsConnection "
          $servicePrincipalConnection=Get-AutomationConnection -Name $connectionName         

          "Logging in to Azure..."
          Add-AzureRmAccount `
              -ServicePrincipal `
              -TenantId $servicePrincipalConnection.TenantId `
              -ApplicationId $servicePrincipalConnection.ApplicationId `
              -CertificateThumbprint $servicePrincipalConnection.CertificateThumbprint 
      }
      catch {
          if (!$servicePrincipalConnection)
          {
              $ErrorMessage = "Connection $connectionName not found."
              throw $ErrorMessage
          } else{
              Write-Error -Message $_.Exception
              throw $_.Exception
          }
      }



        $result = Invoke-AzVMRunCommand `
       -ResourceGroupName $(myResourceGroupName) `
       -Name ShiraWindowsServer `
       -CommandId 'RunPowerShellScript' `
       -ScriptPath Create_Uplad_CopyBlobs.ps1 `
       -Parameter @{myResourceGroupName = "ShiraStorageAccount-rg"; subscriptionID="a8108c2b-496c-424d-8347-ecc8afb6384c"; srcStorageAccountName = "shirastorageaccount0a"; destStorageAccountName = "shirastorageaccount0b"}
       
       if ($result.value.Message -like '*error*') 
        {  
         Write-Output "Failed. An error occurred: `n $($result.value.Message)" | Out-File -Filepath C:\Users\ShiraZadok\Microsoft\OutputLog.txt -Append -Force
         throw $($result.value.Message)        
        }
        else
        {
          Write-Output "Success" | Out-File -Filepath C:\Users\ShiraZadok\Microsoft\OutputLog.txt -Append -Force
        }

        

#- task: AzureMonitorAlerts@0
#  inputs:
#    ResourceGroupName: $(myResourceGroupName)
#    ResourceType: 'Microsoft.Storage/storageAccounts'
#    ResourceName: 

