trigger:
- master

pool: Default


#Global Variables
variables:
 myResourceGroupName: ShiraStorageAccount-rg
 subscriptionName: "MSEC_Candidates_Homeworks"
 subscriptionID: "a8108c2b-496c-424d-8347-ecc8afb6384c"

#Connect to the self-hosted agents
steps:
- script: hostname

#Use the service connection - Github
- task: GitHubComment@0
  inputs:
    gitHubConnection: 'github.com_shiraZadok'
    repositoryName: 'shiraZadok/AzureRmPipeline_MTC'


#Task 2
#Create an ARM template for storage account
#And create 2 storage accounts
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_A `
#      -ResourceGroupName $(myResourceGroupName) `
#      -TemplateFile 'ARM_Templete_StorageAccount.json' `
#      -TemplateParameterFile 'parameters_sa1.json'
#
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_B `
#      -ResourceGroupName $(myResourceGroupName) `
#      -TemplateFile 'ARM_Templete_StorageAccount.json' `
#      -TemplateParameterFile 'parameters_sa2.json'

#Task 3
#Create an ARM template for a Windows server
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      New-AzResourceGroupDeployment `
#      -Name Deployment_create_VM_2 `
#      -ResourceGroupName '$(myResourceGroupName)' `
#      -TemplateFile 'WindowsServerTemplate2.json' `
#      -TemplateParameterFile 'WindowsServerParameters2.json'


#Task 5
#Create, Upload and Copy 100 blobs from Storage account A to B
#Execute it on the windows server
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      Set-AzContext -Subscription $(subscriptionID)   
#      Invoke-AzVMRunCommand `
#       -ResourceGroupName $(myResourceGroupName) `
#       -VMName shiraWindowsServer2 `
#       -CommandId RunPowerShellScript `
#       -ScriptPath .\Create_Uplad_CopyBlobs.ps1

#Task 6
#Create the alert rule on the CPU% metric on a classic VM
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $ResourceGroup = "ShiraStorageAccount-rg"
      # workspace names need to be unique in resource group
      $WorkspaceName = "log-analytics-" + (Get-Random -Maximum 99999)
      $Location = "eastus"

      # Create the workspace
      New-AzOperationalInsightsWorkspace -Location $Location -Name $WorkspaceName -Sku Standard -ResourceGroupName $ResourceGroup

      # List of solutions to enable
      $Solutions = "Security", "Updates", "SQLAssessment"

      # Saved Searches to import
      $ExportedSearches = @"
      [
          {
              "Category":  "My Saved Searches",
              "DisplayName":  "WAD Events (All)",
              "Query":  "Type=Event SourceSystem:AzureStorage ",
              "Version":  1
          },
          {
              "Category":  "My Saved Searches",
              "DisplayName":  "Current Disk Queue Length",
              "Query":  "Perf | where ObjectName == "LogicalDisk" and CounterName == "Current Disk Queue Length" and InstanceName == "C:"",
              "Version":  1
          }
      ]
      "@ | ConvertFrom-Json

      # Custom Log to collect
      $CustomLog = @"
      {
          "customLogName": "sampleCustomLog1",
          "description": "Example custom log datasource",
          "inputs": [
              {
                  "location": {
                  "fileSystemLocations": {
                      "windowsFileTypeLogPaths": [ "e:\\iis5\\*.log" ],
                      "linuxFileTypeLogPaths": [ "/var/logs" ]
                      }
                  },
              "recordDelimiter": {
                  "regexDelimiter": {
                      "pattern": "\\n",
                      "matchIndex": 0,
                      "matchIndexSpecified": true,
                      "numberedGroup": null
                      }
                  }
              }
          ],
          "extractions": [
              {
                  "extractionName": "TimeGenerated",
                  "extractionType": "DateTime",
                  "extractionProperties": {
                      "dateTimeExtraction": {
                          "regex": null,
                          "joinStringRegex": null
                          }
                      }
                  }
              ]
          }
      "@

      # Create the resource group if needed
        try {
            Get-AzResourceGroup -Name $ResourceGroup -ErrorAction Stop
        } catch {
            New-AzResourceGroup -Name $ResourceGroup -Location $Location
        }

        # Create the workspace
        New-AzOperationalInsightsWorkspace -Location $Location -Name $WorkspaceName -Sku Standard -ResourceGroupName $ResourceGroup

      # List all solutions and their installation status
      Get-AzOperationalInsightsIntelligencePack -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName

      # Add solutions
      foreach ($solution in $Solutions) {
          Set-AzOperationalInsightsIntelligencePack -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName -IntelligencePackName $solution -Enabled $true
      }

      # List enabled solutions
      (Get-AzOperationalInsightsIntelligencePack -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName).Where({($_.enabled -eq $true)})

      # Import Saved Searches
      foreach ($search in $ExportedSearches) {
          $id = $search.Category + "|" + $search.DisplayName
          New-AzOperationalInsightsSavedSearch -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName -SavedSearchId $id -DisplayName $search.DisplayName -Category $search.Category -Query $search.Query -Version $search.Version
      }

      # Export Saved Searches
      (Get-AzOperationalInsightsSavedSearch -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName).Value.Properties | ConvertTo-Json

      # Create Computer Group based on a query
      New-AzOperationalInsightsComputerGroup -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName -SavedSearchId "My Web Servers" -DisplayName "Web Servers" -Category "My Saved Searches" -Query "Computer=""web*"" | distinct Computer" -Version 1

      # Enable IIS Log Collection using agent
      Enable-AzOperationalInsightsIISLogCollection -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName

      # Windows Event
      New-AzOperationalInsightsWindowsEventDataSource -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName -EventLogName "Application" -CollectErrors -CollectWarnings -Name "Example Application Event Log"

      # Windows Perf
      New-AzOperationalInsightsWindowsPerformanceCounterDataSource -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName -ObjectName "Memory" -InstanceName "*" -CounterName "Available MBytes" -IntervalSeconds 20 -Name "Example Windows Performance Counter"

      # Custom Logs

      New-AzOperationalInsightsCustomLogDataSource -ResourceGroupName $ResourceGroup -WorkspaceName $WorkspaceName -CustomLogRawJson "$CustomLog" -Name "Example Custom Log Collection"
          Get-AzLog -ResourceGroup $(myResourceGroupName)
          

#     $vm = Get-AzVM -ResourceGroupName $(myResourceGroupName) -Name shiraWindowsServer2    
#     Add-AzMetricAlertRule `
#      -Name shiraWindowsServer2 `
#      -Location "East US" `
#      -ResourceGroup $(myResourceGroupName) `
#      -TargetResourceId $vm.Id `
#      -MetricName "Percentage CPU" `
#      -Operator GreaterThan `
#      -Threshold 1 `
#      -WindowSize 00:05:00 `
#      -TimeAggregationOperator Average `
#      -Action $actionEmail, $actionWebhook `
#      -Description "alert on CPU > 1%"

#- task: AzureMonitorAlerts@0
#  inputs:
#    azureSubscription: $(subscriptionName)
#    ResourceGroupName: $(ShiraStorageAccount-rg)
#    ResourceType: 'Microsoft.Compute/virtualMachines'
#    ResourceName: 'ShiraWindowsServer'
#    AlertRules: 

#- task: AzureMonitorAlerts@0
#  inputs:
#    azureSubscription: $(subscriptionName)
#    ResourceGroupName: $(ShiraStorageAccount-rg)
#    ResourceType: 'Microsoft.Storage/storageAccounts'
#    ResourceName: 'shirastorageaccount0a'
#    AlertRules:

