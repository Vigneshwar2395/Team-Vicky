trigger:
- master

pool: Default


#Global Variables
variables:
 myResourceGroupName: ShiraStorageAccount-rg
 subscriptionName: "MSEC_Candidates_Homeworks"
 subscriptionID: "a8108c2b-496c-424d-8347-ecc8afb6384c"
 location: "eastus"

#Connect to the self-hosted agents
steps:
- script: hostname

#Use the service connection - Github
- task: GitHubComment@0
  inputs:
    gitHubConnection: 'github.com_shiraZadok'
    repositoryName: 'shiraZadok/AzureRmPipeline_MTC'


#Task 2
#Create an ARM template for storage account
#And create 2 storage accounts
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_A `
#      -ResourceGroupName $(myResourceGroupName) `
#      -TemplateFile 'ARM_Templete_StorageAccount.json' `
#      -TemplateParameterFile 'parameters_sa1.json'
#
#      New-AzResourceGroupDeployment -Name Deployment_Create_storageaccount_B `
#      -ResourceGroupName $(myResourceGroupName) `
#      -TemplateFile 'ARM_Templete_StorageAccount.json' `
#      -TemplateParameterFile 'parameters_sa2.json'

#Task 3
#Create an ARM template for a Windows server
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      New-AzResourceGroupDeployment `
#      -Name Deployment_create_VM_2 `
#      -ResourceGroupName '$(myResourceGroupName)' `
#      -TemplateFile 'WindowsServerTemplate2.json' `
#      -TemplateParameterFile 'WindowsServerParameters2.json'


#Task 5
#Create, Upload and Copy 100 blobs from Storage account A to B
#Execute it on the windows server
#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      Set-AzContext -Subscription $(subscriptionID)   
#      $result = Invoke-AzVMRunCommand `
#       -ResourceGroupName $(myResourceGroupName) `
#       -VMName shiraWindowsServer2 `
#       -CommandId RunPowerShellScript `
#       -ScriptPath .\Create_Uplad_CopyBlobs.ps1

#- task: PowerShellOnTargetMachines@3
#  inputs:
#    Machines: 'sws2.eastus.cloudapp.azure.com'
#    UserName: 'shira.zadok'
#    UserPassword: 'ShSz_2086'
#    ScriptType: 'FilePath'
#    ScriptPath: 'C:\Packages\Plugins\Microsoft.CPlat.Core.RunCommandWindows\1.1.8\Downloads\'
      

#Task 6
#Create the alert rule on the CPU% metric on a classic VM
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      
      #Create a dashboard
      Set-AzContext -SubscriptionId $(subscriptionID)
      # Dashboard Title
      $dashboardTitle = 'Shira-Dashboard'
      # Dashboard Name
      $dashboardName = $dashboardTitle -replace '\s'
      # Name of test VM
      $vmName = 'shiraWindowsServer2'

      #Download the dashboard template
      $myPortalDashboardTemplateUrl = 'https://raw.githubusercontent.com/shiraZadok/AzureRmPipeline_MTC/main/Dashboard.json'
      $myPortalDashboardTemplatePath = "$HOME\Dashboard.json"
      Invoke-WebRequest -Uri $myPortalDashboardTemplateUrl -OutFile $myPortalDashboardTemplatePath -UseBasicParsing

      #Customize the template
      $Content = Get-Content -Path $myPortalDashboardTemplatePath -Raw
      $Content = $Content -replace '<subscriptionID>', '$(subscriptionID)'
      $Content = $Content -replace '<rgName>', '$(myResourceGroupName)'
      $Content = $Content -replace '<vmName>', '$vmName'
      $Content = $Content -replace '<dashboardTitle>', $dashboardTitle
      $Content = $Content -replace '<location>', '$(location)'
      $Content | Out-File -FilePath $myPortalDashboardTemplatePath -Force

      #Deploy the dashboard template
      $DashboardParams = @{
        DashboardPath = $myPortalDashboardTemplatePath
        ResourceGroupName = $(myResourceGroupName)
        DashboardName = $dashboardName
      }
      New-AzPortalDashboard @DashboardParams



    #  $vm = Get-AzVM -ResourceGroupName $(myResourceGroupName) -Name shiraWindowsServer2
    #  $actionEmail = New-AzAlertRuleEmail -CustomEmail shira.zadok@msmail.ariel.ac.il
    #  $actionWebhook = New-AzAlertRuleWebhook -ServiceUri "https://ms.portal.azure.com"
    #  Add-AzMetricAlertRule `
    #  -Name shiraWindowsServer2 `
    #  -Location "East US" `
    #  -ResourceGroup $(myResourceGroupName) `
    #  -TargetResourceId $vm.Id `
    #  -MetricName "Percentage CPU" `
    #  -Operator GreaterThan `
    #  -Threshold 1 `
    #  -WindowSize 00:05:00 `
    #  -TimeAggregationOperator Average `
    #  -Action $actionEmail, $actionWebhook `
    #  -Description "alert on CPU > 1%"

#- task: AzureMonitorAlerts@0
#  inputs:
#    azureSubscription: $(subscriptionName)
#    ResourceGroupName: $(ShiraStorageAccount-rg)
#    ResourceType: 'Microsoft.Compute/virtualMachines'
#    ResourceName: 'ShiraWindowsServer'
#    AlertRules: 

#- task: AzureMonitorAlerts@0
#  inputs:
#    azureSubscription: $(subscriptionName)
#    ResourceGroupName: $(ShiraStorageAccount-rg)
#    ResourceType: 'Microsoft.Storage/storageAccounts'
#    ResourceName: 'shirastorageaccount0a'
#    AlertRules:

